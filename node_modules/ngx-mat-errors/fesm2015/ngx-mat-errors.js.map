{"version":3,"file":"ngx-mat-errors.js","sources":["../../../projects/ngx-mat-errors/src/lib/error-meassages.ts","../../../projects/ngx-mat-errors/src/lib/errors.ts","../../../projects/ngx-mat-errors/src/lib/ngx-mat-errors.component.ts","../../../projects/ngx-mat-errors/src/lib/ngx-mat-errors.module.ts","../../../projects/ngx-mat-errors/src/lib/locales/en.ts","../../../projects/ngx-mat-errors/src/lib/locales/hu.ts","../../../projects/ngx-mat-errors/src/public-api.ts","../../../projects/ngx-mat-errors/src/ngx-mat-errors.ts"],"sourcesContent":["\r\nexport type ErrorTransform = (error: any) => string;\r\n\r\nexport interface ErrorMessages {\r\n  [key: string]: string | ErrorTransform;\r\n}\r\n\r\nexport interface MinError {\r\n  min: number;\r\n  actual: number;\r\n}\r\n\r\nexport interface MaxError {\r\n  max: number;\r\n  actual: number;\r\n}\r\n\r\nexport interface LengthError {\r\n  requiredLength: number;\r\n  actualLength: number;\r\n}\r\n\r\nexport interface PatternValidator {\r\n  requiredPattern: string;\r\n  actualValue: string;\r\n}\r\n\r\nexport const DEFAULT_ERROR_MESSAGES: ErrorMessages = {\r\n  min: (error: MinError) =>\r\n  `Please enter a value greater than or equal to ${error.min}.`,\r\n  max: (error: MaxError) =>\r\n    `Please enter a value less than or equal to ${error.max}.`,\r\n  required: `This field is required.`,\r\n  email: `Please enter a valid email address.`,\r\n  minlength: (error: LengthError) =>\r\n    `Please enter at least ${error.requiredLength} characters.`,\r\n  maxlength: (error: LengthError) =>\r\n    `Please enter no more than ${error.requiredLength} characters.`,\r\n  matDatepickerMin: (error: MinError) =>\r\n    `Please enter a date greater than or equal to ${error.min}.`,\r\n  matDatepickerMax: (error: MaxError) =>\r\n    `Please enter a date less than or equal to ${error.max}.`,\r\n};\r\n","/** @docs-private */\r\nexport function getNgxMatErrorDefMissingForError(): Error {\r\n  return Error(\r\n    `'for' must be set for ngxMatErrorDef. See example: *ngxMatErrorDef=\"let error; for: 'pattern'`\r\n  );\r\n}\r\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport { NgControl, ValidationErrors } from '@angular/forms';\nimport {\n  MatFormField,\n  MatFormFieldControl,\n} from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\nimport { DEFAULT_ERROR_MESSAGES, ErrorMessages } from './error-meassages';\nimport { getNgxMatErrorDefMissingForError } from './errors';\n\nexport const NGX_MAT_ERROR_DEFAULT_OPTIONS = new InjectionToken<ErrorMessages>(\n  'NGX_MAT_ERROR_DEFAULT_OPTIONS'\n);\n\nexport interface ErrorOutletContext<T> {\n  $implicit?: T;\n}\n\n@Directive({\n  selector: '[ngxMatErrorDef]',\n})\nexport class NgxMatErrorDef implements OnInit{\n  @Input() ngxMatErrorDefFor!: string;\n  constructor(public template: TemplateRef<any>) {}\n\n  ngOnInit(){\n    if(!this.ngxMatErrorDefFor){\n      throw getNgxMatErrorDefMissingForError();\n    }\n  }\n}\n\n@Directive({ selector: '[ngxMatErrorOutlet]' })\nexport class NgxMatErrorOutlet {\n  constructor(\n    public readonly viewContainer: ViewContainerRef,\n    public readonly elementRef: ElementRef\n  ) {}\n}\n\n@Component({\n  selector: 'ngx-mat-errors, [ngx-mat-errors]',\n  template: `\n    {{ error$ | async }}\n    <ng-container ngxMatErrorOutlet></ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'ngx-mat-errors',\n  },\n})\nexport class NgxMatErrors<T> implements OnInit {\n  private readonly messages: ErrorMessages;\n  private readonly messageKeys: Set<string>;\n  constructor(\n    private readonly cdRef: ChangeDetectorRef,\n    @Optional()\n    @Inject(NGX_MAT_ERROR_DEFAULT_OPTIONS)\n    messages: ErrorMessages | null,\n    @Optional() private readonly matFormField: MatFormField\n  ) {\n    this.messages = messages || DEFAULT_ERROR_MESSAGES;\n    this.messageKeys = new Set(Object.keys(this.messages));\n  }\n\n  @ViewChild(NgxMatErrorOutlet, { static: true })\n  readonly errorOutlet!: NgxMatErrorOutlet;\n\n  @ContentChildren(NgxMatErrorDef, { descendants: true })\n  readonly customErrorMessages!: QueryList<NgxMatErrorDef>;\n\n  readonly error$!: Observable<string>;\n\n  // tslint:disable-next-line: no-input-rename\n  @Input('ngx-mat-errors')\n  control?: MatFormFieldControl<any> | \"\" | null;\n\n  ngOnInit() {\n    if (!this.control && this.matFormField) {\n      this.control = this.matFormField._control;\n    }\n    if (this.control) {\n      const control = this.control.ngControl;\n      const stateChanges = this.control.stateChanges;\n      if (control && stateChanges) {\n        this.initError(control, stateChanges);\n      }\n    }\n  }\n\n  private initError(control: NgControl, stateChanges: Observable<any>) {\n    (this as any).error$ = stateChanges.pipe(\n      startWith(null as any),\n      map(() => {\n        if (!control.errors) {\n          return;\n        }\n        const errorKeys = Object.keys(control.errors);\n        const customErrorMessage = this._getCustomErrorMessage(errorKeys);\n        if (customErrorMessage) {\n          return customErrorMessage;\n        }\n        return errorKeys.find((key) => this.messageKeys.has(key));\n      }),\n      distinctUntilChanged(),\n      map((errorOrErrorDef: undefined | NgxMatErrorDef | string) => {\n        this.errorOutlet.viewContainer.clear();\n        if (!errorOrErrorDef) {\n          return '';\n        }\n        const errors = control.errors as ValidationErrors;\n        if (errorOrErrorDef instanceof NgxMatErrorDef) {\n          this._populateErrorOutlet(errorOrErrorDef, errors);\n          return '';\n        }\n        const message = this.messages[errorOrErrorDef];\n        if (typeof message === 'function') {\n          return message(errors[errorOrErrorDef]);\n        }\n        return message;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private _populateErrorOutlet(\n    errorDef: NgxMatErrorDef,\n    errors: ValidationErrors\n  ) {\n    const context: ErrorOutletContext<T> = {\n      $implicit: errors[errorDef.ngxMatErrorDefFor],\n    };\n    this.errorOutlet.viewContainer.createEmbeddedView(\n      errorDef.template,\n      context\n    );\n    this.cdRef.markForCheck();\n  }\n\n  private _getCustomErrorMessage(errors: string[]) {\n    return this.customErrorMessages.find((customErrorMessage) =>\n      errors.some((error) => error === customErrorMessage.ngxMatErrorDefFor)\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxMatErrorDef, NgxMatErrorOutlet, NgxMatErrors } from './ngx-mat-errors.component';\n\n@NgModule({\n  declarations: [NgxMatErrors, NgxMatErrorDef, NgxMatErrorOutlet],\n  imports: [CommonModule],\n  exports: [NgxMatErrors, NgxMatErrorDef],\n})\nexport class NgxMatErrorsModule {}\n","import { formatDate } from '@angular/common';\r\nimport { FactoryProvider, LOCALE_ID } from '@angular/core';\r\nimport { ErrorMessages, LengthError, MaxError, MinError } from '../error-meassages';\r\nimport { NGX_MAT_ERROR_DEFAULT_OPTIONS } from '../ngx-mat-errors.component';\r\n\r\nexport function errorMessagesEnFactory(\r\n  locale: string,\r\n  format = 'shortDate'\r\n): ErrorMessages {\r\n  return {\r\n    min: (error: MinError) =>\r\n      `Please enter a value greater than or equal to ${error.min}.`,\r\n    max: (error: MaxError) =>\r\n      `Please enter a value less than or equal to ${error.max}.`,\r\n    required: `This field is required.`,\r\n    email: `Please enter a valid email address.`,\r\n    minlength: (error: LengthError) =>\r\n      `Please enter at least ${error.requiredLength} characters.`,\r\n    maxlength: (error: LengthError) =>\r\n      `Please enter no more than ${error.requiredLength} characters.`,\r\n    matDatepickerMin: (error: MinError) => {\r\n      const formatted = formatDate(error.min, format, locale);\r\n      return `Please enter a date greater than or equal to ${\r\n        formatted ?? error.min\r\n      }.`;\r\n    },\r\n    matDatepickerMax: (error: MaxError) => {\r\n      const formatted = formatDate(error.max, format, locale);\r\n      return `Please enter a date less than or equal to ${\r\n        formatted ?? error.max\r\n      }.`;\r\n    },\r\n  };\r\n}\r\n\r\nexport const NGX_MAT_ERROR_CONFIG_EN: FactoryProvider = {\r\n  provide: NGX_MAT_ERROR_DEFAULT_OPTIONS,\r\n  useFactory: errorMessagesEnFactory,\r\n  deps: [LOCALE_ID],\r\n};\r\n","import { formatDate } from '@angular/common';\r\nimport { FactoryProvider, LOCALE_ID } from '@angular/core';\r\nimport { ErrorMessages, LengthError, MaxError, MinError } from '../error-meassages';\r\nimport { NGX_MAT_ERROR_DEFAULT_OPTIONS } from '../ngx-mat-errors.component';\r\n\r\nexport function errorMessagesHuFactory(locale: string, format = 'shortDate'): ErrorMessages {\r\n  return {\r\n    min: (error: MinError) => `Nem lehet kisebb, mint ${error.min}.`,\r\n    max: (error: MaxError) => `Nem lehet nagyobb, mint ${error.max}.`,\r\n    required: `Kötelező mező.`,\r\n    email: `Nem érvényes e-mail cím.`,\r\n    minlength: (error: LengthError) =>\r\n      `Legalább ${error.requiredLength} karakter hosszú lehet.`,\r\n    maxlength: (error: LengthError) =>\r\n      `Legfeljebb ${error.requiredLength} karakter hosszú lehet.`,\r\n    server: (error: string) => error,\r\n    matDatepickerMin: (error: MinError) => {\r\n      const formatted = formatDate(error.min, format, locale);\r\n      return `Nem lehet korábbi dátum, mint ${formatted ?? error.min}`;\r\n    },\r\n    matDatepickerMax: (error: MaxError) => {\r\n      const formatted = formatDate(error.max, format, locale);\r\n      return `Nem lehet készőbbi dátum, mint ${formatted ?? error.max}`;\r\n    },\r\n  };\r\n}\r\n\r\nexport const NGX_MAT_ERROR_CONFIG_HU: FactoryProvider = {\r\n  provide: NGX_MAT_ERROR_DEFAULT_OPTIONS,\r\n  useFactory: errorMessagesHuFactory,\r\n  deps: [LOCALE_ID]\r\n};\r\n","/*\n * Public API Surface of ngx-mat-errors\n */\n\nexport * from './lib/ngx-mat-errors.component';\nexport * from './lib/ngx-mat-errors.module';\nexport * from './lib/error-meassages';\nexport * from './lib/locales';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}