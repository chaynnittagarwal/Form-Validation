import { ChangeDetectorRef, ElementRef, OnInit, QueryList, TemplateRef, ViewContainerRef, InjectionToken } from '@angular/core';
import { MatFormField, MatFormFieldControl } from '@angular/material/form-field';
import { Observable } from 'rxjs';
import { ErrorMessages } from './error-meassages';
export declare const NGX_MAT_ERROR_DEFAULT_OPTIONS: InjectionToken<ErrorMessages>;
export interface ErrorOutletContext<T> {
    $implicit?: T;
}
export declare class NgxMatErrorDef implements OnInit {
    template: TemplateRef<any>;
    ngxMatErrorDefFor: string;
    constructor(template: TemplateRef<any>);
    ngOnInit(): void;
}
export declare class NgxMatErrorOutlet {
    readonly viewContainer: ViewContainerRef;
    readonly elementRef: ElementRef;
    constructor(viewContainer: ViewContainerRef, elementRef: ElementRef);
}
export declare class NgxMatErrors<T> implements OnInit {
    private readonly cdRef;
    private readonly matFormField;
    private readonly messages;
    private readonly messageKeys;
    constructor(cdRef: ChangeDetectorRef, messages: ErrorMessages | null, matFormField: MatFormField);
    readonly errorOutlet: NgxMatErrorOutlet;
    readonly customErrorMessages: QueryList<NgxMatErrorDef>;
    readonly error$: Observable<string>;
    control?: MatFormFieldControl<any> | "" | null;
    ngOnInit(): void;
    private initError;
    private _populateErrorOutlet;
    private _getCustomErrorMessage;
}
