import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, Inject, Input, Optional, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation, InjectionToken, } from '@angular/core';
import { MatFormField, } from '@angular/material/form-field';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { DEFAULT_ERROR_MESSAGES } from './error-meassages';
import { getNgxMatErrorDefMissingForError } from './errors';
export const NGX_MAT_ERROR_DEFAULT_OPTIONS = new InjectionToken('NGX_MAT_ERROR_DEFAULT_OPTIONS');
export class NgxMatErrorDef {
    constructor(template) {
        this.template = template;
    }
    ngOnInit() {
        if (!this.ngxMatErrorDefFor) {
            throw getNgxMatErrorDefMissingForError();
        }
    }
}
NgxMatErrorDef.decorators = [
    { type: Directive, args: [{
                selector: '[ngxMatErrorDef]',
            },] }
];
NgxMatErrorDef.ctorParameters = () => [
    { type: TemplateRef }
];
NgxMatErrorDef.propDecorators = {
    ngxMatErrorDefFor: [{ type: Input }]
};
export class NgxMatErrorOutlet {
    constructor(viewContainer, elementRef) {
        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
    }
}
NgxMatErrorOutlet.decorators = [
    { type: Directive, args: [{ selector: '[ngxMatErrorOutlet]' },] }
];
NgxMatErrorOutlet.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef }
];
export class NgxMatErrors {
    constructor(cdRef, messages, matFormField) {
        this.cdRef = cdRef;
        this.matFormField = matFormField;
        this.messages = messages || DEFAULT_ERROR_MESSAGES;
        this.messageKeys = new Set(Object.keys(this.messages));
    }
    ngOnInit() {
        if (!this.control && this.matFormField) {
            this.control = this.matFormField._control;
        }
        if (this.control) {
            const control = this.control.ngControl;
            const stateChanges = this.control.stateChanges;
            if (control && stateChanges) {
                this.initError(control, stateChanges);
            }
        }
    }
    initError(control, stateChanges) {
        this.error$ = stateChanges.pipe(startWith(null), map(() => {
            if (!control.errors) {
                return;
            }
            const errorKeys = Object.keys(control.errors);
            const customErrorMessage = this._getCustomErrorMessage(errorKeys);
            if (customErrorMessage) {
                return customErrorMessage;
            }
            return errorKeys.find((key) => this.messageKeys.has(key));
        }), distinctUntilChanged(), map((errorOrErrorDef) => {
            this.errorOutlet.viewContainer.clear();
            if (!errorOrErrorDef) {
                return '';
            }
            const errors = control.errors;
            if (errorOrErrorDef instanceof NgxMatErrorDef) {
                this._populateErrorOutlet(errorOrErrorDef, errors);
                return '';
            }
            const message = this.messages[errorOrErrorDef];
            if (typeof message === 'function') {
                return message(errors[errorOrErrorDef]);
            }
            return message;
        }), distinctUntilChanged());
    }
    _populateErrorOutlet(errorDef, errors) {
        const context = {
            $implicit: errors[errorDef.ngxMatErrorDefFor],
        };
        this.errorOutlet.viewContainer.createEmbeddedView(errorDef.template, context);
        this.cdRef.markForCheck();
    }
    _getCustomErrorMessage(errors) {
        return this.customErrorMessages.find((customErrorMessage) => errors.some((error) => error === customErrorMessage.ngxMatErrorDefFor));
    }
}
NgxMatErrors.decorators = [
    { type: Component, args: [{
                selector: 'ngx-mat-errors, [ngx-mat-errors]',
                template: `
    {{ error$ | async }}
    <ng-container ngxMatErrorOutlet></ng-container>
  `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    class: 'ngx-mat-errors',
                }
            },] }
];
NgxMatErrors.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_MAT_ERROR_DEFAULT_OPTIONS,] }] },
    { type: MatFormField, decorators: [{ type: Optional }] }
];
NgxMatErrors.propDecorators = {
    errorOutlet: [{ type: ViewChild, args: [NgxMatErrorOutlet, { static: true },] }],
    customErrorMessages: [{ type: ContentChildren, args: [NgxMatErrorDef, { descendants: true },] }],
    control: [{ type: Input, args: ['ngx-mat-errors',] }]
};
//# sourceMappingURL=data:application/json;base64,