import { formatDate } from '@angular/common';
import { LOCALE_ID } from '@angular/core';
import { NGX_MAT_ERROR_DEFAULT_OPTIONS } from '../ngx-mat-errors.component';
export function errorMessagesEnFactory(locale, format = 'shortDate') {
    return {
        min: (error) => `Please enter a value greater than or equal to ${error.min}.`,
        max: (error) => `Please enter a value less than or equal to ${error.max}.`,
        required: `This field is required.`,
        email: `Please enter a valid email address.`,
        minlength: (error) => `Please enter at least ${error.requiredLength} characters.`,
        maxlength: (error) => `Please enter no more than ${error.requiredLength} characters.`,
        matDatepickerMin: (error) => {
            const formatted = formatDate(error.min, format, locale);
            return `Please enter a date greater than or equal to ${formatted !== null && formatted !== void 0 ? formatted : error.min}.`;
        },
        matDatepickerMax: (error) => {
            const formatted = formatDate(error.max, format, locale);
            return `Please enter a date less than or equal to ${formatted !== null && formatted !== void 0 ? formatted : error.max}.`;
        },
    };
}
export const NGX_MAT_ERROR_CONFIG_EN = {
    provide: NGX_MAT_ERROR_DEFAULT_OPTIONS,
    useFactory: errorMessagesEnFactory,
    deps: [LOCALE_ID],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW4uanMiLCJzb3VyY2VSb290IjoiQzovUmVwb3Mvbmd4LW1hdC1lcnJvcnMvcHJvamVjdHMvbmd4LW1hdC1lcnJvcnMvc3JjLyIsInNvdXJjZXMiOlsibGliL2xvY2FsZXMvZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBbUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTVFLE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsTUFBYyxFQUNkLE1BQU0sR0FBRyxXQUFXO0lBRXBCLE9BQU87UUFDTCxHQUFHLEVBQUUsQ0FBQyxLQUFlLEVBQUUsRUFBRSxDQUN2QixpREFBaUQsS0FBSyxDQUFDLEdBQUcsR0FBRztRQUMvRCxHQUFHLEVBQUUsQ0FBQyxLQUFlLEVBQUUsRUFBRSxDQUN2Qiw4Q0FBOEMsS0FBSyxDQUFDLEdBQUcsR0FBRztRQUM1RCxRQUFRLEVBQUUseUJBQXlCO1FBQ25DLEtBQUssRUFBRSxxQ0FBcUM7UUFDNUMsU0FBUyxFQUFFLENBQUMsS0FBa0IsRUFBRSxFQUFFLENBQ2hDLHlCQUF5QixLQUFLLENBQUMsY0FBYyxjQUFjO1FBQzdELFNBQVMsRUFBRSxDQUFDLEtBQWtCLEVBQUUsRUFBRSxDQUNoQyw2QkFBNkIsS0FBSyxDQUFDLGNBQWMsY0FBYztRQUNqRSxnQkFBZ0IsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4RCxPQUFPLGdEQUNMLFNBQVMsYUFBVCxTQUFTLGNBQVQsU0FBUyxHQUFJLEtBQUssQ0FBQyxHQUNyQixHQUFHLENBQUM7UUFDTixDQUFDO1FBQ0QsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFlLEVBQUUsRUFBRTtZQUNwQyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEQsT0FBTyw2Q0FDTCxTQUFTLGFBQVQsU0FBUyxjQUFULFNBQVMsR0FBSSxLQUFLLENBQUMsR0FDckIsR0FBRyxDQUFDO1FBQ04sQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQW9CO0lBQ3RELE9BQU8sRUFBRSw2QkFBNkI7SUFDdEMsVUFBVSxFQUFFLHNCQUFzQjtJQUNsQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUM7Q0FDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBGYWN0b3J5UHJvdmlkZXIsIExPQ0FMRV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VzLCBMZW5ndGhFcnJvciwgTWF4RXJyb3IsIE1pbkVycm9yIH0gZnJvbSAnLi4vZXJyb3ItbWVhc3NhZ2VzJztcclxuaW1wb3J0IHsgTkdYX01BVF9FUlJPUl9ERUZBVUxUX09QVElPTlMgfSBmcm9tICcuLi9uZ3gtbWF0LWVycm9ycy5jb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTWVzc2FnZXNFbkZhY3RvcnkoXHJcbiAgbG9jYWxlOiBzdHJpbmcsXHJcbiAgZm9ybWF0ID0gJ3Nob3J0RGF0ZSdcclxuKTogRXJyb3JNZXNzYWdlcyB7XHJcbiAgcmV0dXJuIHtcclxuICAgIG1pbjogKGVycm9yOiBNaW5FcnJvcikgPT5cclxuICAgICAgYFBsZWFzZSBlbnRlciBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAke2Vycm9yLm1pbn0uYCxcclxuICAgIG1heDogKGVycm9yOiBNYXhFcnJvcikgPT5cclxuICAgICAgYFBsZWFzZSBlbnRlciBhIHZhbHVlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAke2Vycm9yLm1heH0uYCxcclxuICAgIHJlcXVpcmVkOiBgVGhpcyBmaWVsZCBpcyByZXF1aXJlZC5gLFxyXG4gICAgZW1haWw6IGBQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLmAsXHJcbiAgICBtaW5sZW5ndGg6IChlcnJvcjogTGVuZ3RoRXJyb3IpID0+XHJcbiAgICAgIGBQbGVhc2UgZW50ZXIgYXQgbGVhc3QgJHtlcnJvci5yZXF1aXJlZExlbmd0aH0gY2hhcmFjdGVycy5gLFxyXG4gICAgbWF4bGVuZ3RoOiAoZXJyb3I6IExlbmd0aEVycm9yKSA9PlxyXG4gICAgICBgUGxlYXNlIGVudGVyIG5vIG1vcmUgdGhhbiAke2Vycm9yLnJlcXVpcmVkTGVuZ3RofSBjaGFyYWN0ZXJzLmAsXHJcbiAgICBtYXREYXRlcGlja2VyTWluOiAoZXJyb3I6IE1pbkVycm9yKSA9PiB7XHJcbiAgICAgIGNvbnN0IGZvcm1hdHRlZCA9IGZvcm1hdERhdGUoZXJyb3IubWluLCBmb3JtYXQsIGxvY2FsZSk7XHJcbiAgICAgIHJldHVybiBgUGxlYXNlIGVudGVyIGEgZGF0ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJHtcclxuICAgICAgICBmb3JtYXR0ZWQgPz8gZXJyb3IubWluXHJcbiAgICAgIH0uYDtcclxuICAgIH0sXHJcbiAgICBtYXREYXRlcGlja2VyTWF4OiAoZXJyb3I6IE1heEVycm9yKSA9PiB7XHJcbiAgICAgIGNvbnN0IGZvcm1hdHRlZCA9IGZvcm1hdERhdGUoZXJyb3IubWF4LCBmb3JtYXQsIGxvY2FsZSk7XHJcbiAgICAgIHJldHVybiBgUGxlYXNlIGVudGVyIGEgZGF0ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJHtcclxuICAgICAgICBmb3JtYXR0ZWQgPz8gZXJyb3IubWF4XHJcbiAgICAgIH0uYDtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5HWF9NQVRfRVJST1JfQ09ORklHX0VOOiBGYWN0b3J5UHJvdmlkZXIgPSB7XHJcbiAgcHJvdmlkZTogTkdYX01BVF9FUlJPUl9ERUZBVUxUX09QVElPTlMsXHJcbiAgdXNlRmFjdG9yeTogZXJyb3JNZXNzYWdlc0VuRmFjdG9yeSxcclxuICBkZXBzOiBbTE9DQUxFX0lEXSxcclxufTtcclxuIl19