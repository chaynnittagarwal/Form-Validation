{"version":3,"sources":["../../../projects/ngx-mat-errors/src/lib/error-meassages.ts","../../../projects/ngx-mat-errors/src/lib/ngx-mat-errors.component.ts","../../../projects/ngx-mat-errors/src/lib/errors.ts","../../../projects/ngx-mat-errors/src/lib/ngx-mat-errors.module.ts","../../../projects/ngx-mat-errors/src/lib/locales/en.ts","../../../projects/ngx-mat-errors/src/lib/locales/hu.ts"],"names":["error","min","ɵ1","max","ɵ2","requiredLength","ɵ3","ɵ4","ɵ5","DEFAULT_ERROR_MESSAGES","ɵ0","required","email","minlength","maxlength","matDatepickerMin","matDatepickerMax","NGX_MAT_ERROR_DEFAULT_OPTIONS","InjectionToken","NgxMatErrorDef","template","this","prototype","ngOnInit","ngxMatErrorDefFor","Error","Directive","args","selector","TemplateRef","Input","viewContainer","elementRef","ViewContainerRef","ElementRef","NgxMatErrors","cdRef","messages","matFormField","messageKeys","Set","Object","keys","control","_control","ngControl","stateChanges","initError","_this","error$","pipe","startWith","map","errors","errorKeys","customErrorMessage","_getCustomErrorMessage","find","key","has","distinctUntilChanged","errorOrErrorDef","errorOutlet","clear","_populateErrorOutlet","message","errorDef","context","$implicit","createEmbeddedView","markForCheck","customErrorMessages","some","Component","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","ChangeDetectorRef","Optional","type","Inject","MatFormField","decorators","ViewChild","NgxMatErrorOutlet","static","ContentChildren","descendants","errorMessagesEnFactory","locale","format","formatted","formatDate","NgModule","declarations","imports","CommonModule","exports","NGX_MAT_ERROR_CONFIG_EN","provide","useFactory","deps","LOCALE_ID","errorMessagesHuFactory","server","NGX_MAT_ERROR_CONFIG_HU"],"mappings":"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","sourcesContent":["\r\nexport type ErrorTransform = (error: any) => string;\r\n\r\nexport interface ErrorMessages {\r\n  [key: string]: string | ErrorTransform;\r\n}\r\n\r\nexport interface MinError {\r\n  min: number;\r\n  actual: number;\r\n}\r\n\r\nexport interface MaxError {\r\n  max: number;\r\n  actual: number;\r\n}\r\n\r\nexport interface LengthError {\r\n  requiredLength: number;\r\n  actualLength: number;\r\n}\r\n\r\nexport interface PatternValidator {\r\n  requiredPattern: string;\r\n  actualValue: string;\r\n}\r\n\r\nexport const DEFAULT_ERROR_MESSAGES: ErrorMessages = {\r\n  min: (error: MinError) =>\r\n  `Please enter a value greater than or equal to ${error.min}.`,\r\n  max: (error: MaxError) =>\r\n    `Please enter a value less than or equal to ${error.max}.`,\r\n  required: `This field is required.`,\r\n  email: `Please enter a valid email address.`,\r\n  minlength: (error: LengthError) =>\r\n    `Please enter at least ${error.requiredLength} characters.`,\r\n  maxlength: (error: LengthError) =>\r\n    `Please enter no more than ${error.requiredLength} characters.`,\r\n  matDatepickerMin: (error: MinError) =>\r\n    `Please enter a date greater than or equal to ${error.min}.`,\r\n  matDatepickerMax: (error: MaxError) =>\r\n    `Please enter a date less than or equal to ${error.max}.`,\r\n};\r\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport { NgControl, ValidationErrors } from '@angular/forms';\nimport {\n  MatFormField,\n  MatFormFieldControl,\n} from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\nimport { DEFAULT_ERROR_MESSAGES, ErrorMessages } from './error-meassages';\nimport { getNgxMatErrorDefMissingForError } from './errors';\n\nexport const NGX_MAT_ERROR_DEFAULT_OPTIONS = new InjectionToken<ErrorMessages>(\n  'NGX_MAT_ERROR_DEFAULT_OPTIONS'\n);\n\nexport interface ErrorOutletContext<T> {\n  $implicit?: T;\n}\n\n@Directive({\n  selector: '[ngxMatErrorDef]',\n})\nexport class NgxMatErrorDef implements OnInit{\n  @Input() ngxMatErrorDefFor!: string;\n  constructor(public template: TemplateRef<any>) {}\n\n  ngOnInit(){\n    if(!this.ngxMatErrorDefFor){\n      throw getNgxMatErrorDefMissingForError();\n    }\n  }\n}\n\n@Directive({ selector: '[ngxMatErrorOutlet]' })\nexport class NgxMatErrorOutlet {\n  constructor(\n    public readonly viewContainer: ViewContainerRef,\n    public readonly elementRef: ElementRef\n  ) {}\n}\n\n@Component({\n  selector: 'ngx-mat-errors, [ngx-mat-errors]',\n  template: `\n    {{ error$ | async }}\n    <ng-container ngxMatErrorOutlet></ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'ngx-mat-errors',\n  },\n})\nexport class NgxMatErrors<T> implements OnInit {\n  private readonly messages: ErrorMessages;\n  private readonly messageKeys: Set<string>;\n  constructor(\n    private readonly cdRef: ChangeDetectorRef,\n    @Optional()\n    @Inject(NGX_MAT_ERROR_DEFAULT_OPTIONS)\n    messages: ErrorMessages | null,\n    @Optional() private readonly matFormField: MatFormField\n  ) {\n    this.messages = messages || DEFAULT_ERROR_MESSAGES;\n    this.messageKeys = new Set(Object.keys(this.messages));\n  }\n\n  @ViewChild(NgxMatErrorOutlet, { static: true })\n  readonly errorOutlet!: NgxMatErrorOutlet;\n\n  @ContentChildren(NgxMatErrorDef, { descendants: true })\n  readonly customErrorMessages!: QueryList<NgxMatErrorDef>;\n\n  readonly error$!: Observable<string>;\n\n  // tslint:disable-next-line: no-input-rename\n  @Input('ngx-mat-errors')\n  control?: MatFormFieldControl<any> | \"\" | null;\n\n  ngOnInit() {\n    if (!this.control && this.matFormField) {\n      this.control = this.matFormField._control;\n    }\n    if (this.control) {\n      const control = this.control.ngControl;\n      const stateChanges = this.control.stateChanges;\n      if (control && stateChanges) {\n        this.initError(control, stateChanges);\n      }\n    }\n  }\n\n  private initError(control: NgControl, stateChanges: Observable<any>) {\n    (this as any).error$ = stateChanges.pipe(\n      startWith(null as any),\n      map(() => {\n        if (!control.errors) {\n          return;\n        }\n        const errorKeys = Object.keys(control.errors);\n        const customErrorMessage = this._getCustomErrorMessage(errorKeys);\n        if (customErrorMessage) {\n          return customErrorMessage;\n        }\n        return errorKeys.find((key) => this.messageKeys.has(key));\n      }),\n      distinctUntilChanged(),\n      map((errorOrErrorDef: undefined | NgxMatErrorDef | string) => {\n        this.errorOutlet.viewContainer.clear();\n        if (!errorOrErrorDef) {\n          return '';\n        }\n        const errors = control.errors as ValidationErrors;\n        if (errorOrErrorDef instanceof NgxMatErrorDef) {\n          this._populateErrorOutlet(errorOrErrorDef, errors);\n          return '';\n        }\n        const message = this.messages[errorOrErrorDef];\n        if (typeof message === 'function') {\n          return message(errors[errorOrErrorDef]);\n        }\n        return message;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private _populateErrorOutlet(\n    errorDef: NgxMatErrorDef,\n    errors: ValidationErrors\n  ) {\n    const context: ErrorOutletContext<T> = {\n      $implicit: errors[errorDef.ngxMatErrorDefFor],\n    };\n    this.errorOutlet.viewContainer.createEmbeddedView(\n      errorDef.template,\n      context\n    );\n    this.cdRef.markForCheck();\n  }\n\n  private _getCustomErrorMessage(errors: string[]) {\n    return this.customErrorMessages.find((customErrorMessage) =>\n      errors.some((error) => error === customErrorMessage.ngxMatErrorDefFor)\n    );\n  }\n}\n","/** @docs-private */\r\nexport function getNgxMatErrorDefMissingForError(): Error {\r\n  return Error(\r\n    `'for' must be set for ngxMatErrorDef. See example: *ngxMatErrorDef=\"let error; for: 'pattern'`\r\n  );\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxMatErrorDef, NgxMatErrorOutlet, NgxMatErrors } from './ngx-mat-errors.component';\n\n@NgModule({\n  declarations: [NgxMatErrors, NgxMatErrorDef, NgxMatErrorOutlet],\n  imports: [CommonModule],\n  exports: [NgxMatErrors, NgxMatErrorDef],\n})\nexport class NgxMatErrorsModule {}\n","import { formatDate } from '@angular/common';\r\nimport { FactoryProvider, LOCALE_ID } from '@angular/core';\r\nimport { ErrorMessages, LengthError, MaxError, MinError } from '../error-meassages';\r\nimport { NGX_MAT_ERROR_DEFAULT_OPTIONS } from '../ngx-mat-errors.component';\r\n\r\nexport function errorMessagesEnFactory(\r\n  locale: string,\r\n  format = 'shortDate'\r\n): ErrorMessages {\r\n  return {\r\n    min: (error: MinError) =>\r\n      `Please enter a value greater than or equal to ${error.min}.`,\r\n    max: (error: MaxError) =>\r\n      `Please enter a value less than or equal to ${error.max}.`,\r\n    required: `This field is required.`,\r\n    email: `Please enter a valid email address.`,\r\n    minlength: (error: LengthError) =>\r\n      `Please enter at least ${error.requiredLength} characters.`,\r\n    maxlength: (error: LengthError) =>\r\n      `Please enter no more than ${error.requiredLength} characters.`,\r\n    matDatepickerMin: (error: MinError) => {\r\n      const formatted = formatDate(error.min, format, locale);\r\n      return `Please enter a date greater than or equal to ${\r\n        formatted ?? error.min\r\n      }.`;\r\n    },\r\n    matDatepickerMax: (error: MaxError) => {\r\n      const formatted = formatDate(error.max, format, locale);\r\n      return `Please enter a date less than or equal to ${\r\n        formatted ?? error.max\r\n      }.`;\r\n    },\r\n  };\r\n}\r\n\r\nexport const NGX_MAT_ERROR_CONFIG_EN: FactoryProvider = {\r\n  provide: NGX_MAT_ERROR_DEFAULT_OPTIONS,\r\n  useFactory: errorMessagesEnFactory,\r\n  deps: [LOCALE_ID],\r\n};\r\n","import { formatDate } from '@angular/common';\r\nimport { FactoryProvider, LOCALE_ID } from '@angular/core';\r\nimport { ErrorMessages, LengthError, MaxError, MinError } from '../error-meassages';\r\nimport { NGX_MAT_ERROR_DEFAULT_OPTIONS } from '../ngx-mat-errors.component';\r\n\r\nexport function errorMessagesHuFactory(locale: string, format = 'shortDate'): ErrorMessages {\r\n  return {\r\n    min: (error: MinError) => `Nem lehet kisebb, mint ${error.min}.`,\r\n    max: (error: MaxError) => `Nem lehet nagyobb, mint ${error.max}.`,\r\n    required: `Kötelező mező.`,\r\n    email: `Nem érvényes e-mail cím.`,\r\n    minlength: (error: LengthError) =>\r\n      `Legalább ${error.requiredLength} karakter hosszú lehet.`,\r\n    maxlength: (error: LengthError) =>\r\n      `Legfeljebb ${error.requiredLength} karakter hosszú lehet.`,\r\n    server: (error: string) => error,\r\n    matDatepickerMin: (error: MinError) => {\r\n      const formatted = formatDate(error.min, format, locale);\r\n      return `Nem lehet korábbi dátum, mint ${formatted ?? error.min}`;\r\n    },\r\n    matDatepickerMax: (error: MaxError) => {\r\n      const formatted = formatDate(error.max, format, locale);\r\n      return `Nem lehet készőbbi dátum, mint ${formatted ?? error.max}`;\r\n    },\r\n  };\r\n}\r\n\r\nexport const NGX_MAT_ERROR_CONFIG_HU: FactoryProvider = {\r\n  provide: NGX_MAT_ERROR_DEFAULT_OPTIONS,\r\n  useFactory: errorMessagesHuFactory,\r\n  deps: [LOCALE_ID]\r\n};\r\n"]}