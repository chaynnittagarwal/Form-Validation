{"version":3,"file":"ngx-mat-errors.umd.js","sources":["../../../projects/ngx-mat-errors/src/lib/error-meassages.ts","../../../projects/ngx-mat-errors/src/lib/errors.ts","../../../projects/ngx-mat-errors/src/lib/ngx-mat-errors.component.ts","../../../projects/ngx-mat-errors/src/lib/ngx-mat-errors.module.ts","../../../projects/ngx-mat-errors/src/lib/locales/en.ts","../../../projects/ngx-mat-errors/src/lib/locales/hu.ts","../../../projects/ngx-mat-errors/src/public-api.ts","../../../projects/ngx-mat-errors/src/ngx-mat-errors.ts"],"sourcesContent":["\r\nexport type ErrorTransform = (error: any) => string;\r\n\r\nexport interface ErrorMessages {\r\n  [key: string]: string | ErrorTransform;\r\n}\r\n\r\nexport interface MinError {\r\n  min: number;\r\n  actual: number;\r\n}\r\n\r\nexport interface MaxError {\r\n  max: number;\r\n  actual: number;\r\n}\r\n\r\nexport interface LengthError {\r\n  requiredLength: number;\r\n  actualLength: number;\r\n}\r\n\r\nexport interface PatternValidator {\r\n  requiredPattern: string;\r\n  actualValue: string;\r\n}\r\n\r\nexport const DEFAULT_ERROR_MESSAGES: ErrorMessages = {\r\n  min: (error: MinError) =>\r\n  `Please enter a value greater than or equal to ${error.min}.`,\r\n  max: (error: MaxError) =>\r\n    `Please enter a value less than or equal to ${error.max}.`,\r\n  required: `This field is required.`,\r\n  email: `Please enter a valid email address.`,\r\n  minlength: (error: LengthError) =>\r\n    `Please enter at least ${error.requiredLength} characters.`,\r\n  maxlength: (error: LengthError) =>\r\n    `Please enter no more than ${error.requiredLength} characters.`,\r\n  matDatepickerMin: (error: MinError) =>\r\n    `Please enter a date greater than or equal to ${error.min}.`,\r\n  matDatepickerMax: (error: MaxError) =>\r\n    `Please enter a date less than or equal to ${error.max}.`,\r\n};\r\n","/** @docs-private */\r\nexport function getNgxMatErrorDefMissingForError(): Error {\r\n  return Error(\r\n    `'for' must be set for ngxMatErrorDef. See example: *ngxMatErrorDef=\"let error; for: 'pattern'`\r\n  );\r\n}\r\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport { NgControl, ValidationErrors } from '@angular/forms';\nimport {\n  MatFormField,\n  MatFormFieldControl,\n} from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\nimport { DEFAULT_ERROR_MESSAGES, ErrorMessages } from './error-meassages';\nimport { getNgxMatErrorDefMissingForError } from './errors';\n\nexport const NGX_MAT_ERROR_DEFAULT_OPTIONS = new InjectionToken<ErrorMessages>(\n  'NGX_MAT_ERROR_DEFAULT_OPTIONS'\n);\n\nexport interface ErrorOutletContext<T> {\n  $implicit?: T;\n}\n\n@Directive({\n  selector: '[ngxMatErrorDef]',\n})\nexport class NgxMatErrorDef implements OnInit{\n  @Input() ngxMatErrorDefFor!: string;\n  constructor(public template: TemplateRef<any>) {}\n\n  ngOnInit(){\n    if(!this.ngxMatErrorDefFor){\n      throw getNgxMatErrorDefMissingForError();\n    }\n  }\n}\n\n@Directive({ selector: '[ngxMatErrorOutlet]' })\nexport class NgxMatErrorOutlet {\n  constructor(\n    public readonly viewContainer: ViewContainerRef,\n    public readonly elementRef: ElementRef\n  ) {}\n}\n\n@Component({\n  selector: 'ngx-mat-errors, [ngx-mat-errors]',\n  template: `\n    {{ error$ | async }}\n    <ng-container ngxMatErrorOutlet></ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'ngx-mat-errors',\n  },\n})\nexport class NgxMatErrors<T> implements OnInit {\n  private readonly messages: ErrorMessages;\n  private readonly messageKeys: Set<string>;\n  constructor(\n    private readonly cdRef: ChangeDetectorRef,\n    @Optional()\n    @Inject(NGX_MAT_ERROR_DEFAULT_OPTIONS)\n    messages: ErrorMessages | null,\n    @Optional() private readonly matFormField: MatFormField\n  ) {\n    this.messages = messages || DEFAULT_ERROR_MESSAGES;\n    this.messageKeys = new Set(Object.keys(this.messages));\n  }\n\n  @ViewChild(NgxMatErrorOutlet, { static: true })\n  readonly errorOutlet!: NgxMatErrorOutlet;\n\n  @ContentChildren(NgxMatErrorDef, { descendants: true })\n  readonly customErrorMessages!: QueryList<NgxMatErrorDef>;\n\n  readonly error$!: Observable<string>;\n\n  // tslint:disable-next-line: no-input-rename\n  @Input('ngx-mat-errors')\n  control?: MatFormFieldControl<any> | \"\" | null;\n\n  ngOnInit() {\n    if (!this.control && this.matFormField) {\n      this.control = this.matFormField._control;\n    }\n    if (this.control) {\n      const control = this.control.ngControl;\n      const stateChanges = this.control.stateChanges;\n      if (control && stateChanges) {\n        this.initError(control, stateChanges);\n      }\n    }\n  }\n\n  private initError(control: NgControl, stateChanges: Observable<any>) {\n    (this as any).error$ = stateChanges.pipe(\n      startWith(null as any),\n      map(() => {\n        if (!control.errors) {\n          return;\n        }\n        const errorKeys = Object.keys(control.errors);\n        const customErrorMessage = this._getCustomErrorMessage(errorKeys);\n        if (customErrorMessage) {\n          return customErrorMessage;\n        }\n        return errorKeys.find((key) => this.messageKeys.has(key));\n      }),\n      distinctUntilChanged(),\n      map((errorOrErrorDef: undefined | NgxMatErrorDef | string) => {\n        this.errorOutlet.viewContainer.clear();\n        if (!errorOrErrorDef) {\n          return '';\n        }\n        const errors = control.errors as ValidationErrors;\n        if (errorOrErrorDef instanceof NgxMatErrorDef) {\n          this._populateErrorOutlet(errorOrErrorDef, errors);\n          return '';\n        }\n        const message = this.messages[errorOrErrorDef];\n        if (typeof message === 'function') {\n          return message(errors[errorOrErrorDef]);\n        }\n        return message;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private _populateErrorOutlet(\n    errorDef: NgxMatErrorDef,\n    errors: ValidationErrors\n  ) {\n    const context: ErrorOutletContext<T> = {\n      $implicit: errors[errorDef.ngxMatErrorDefFor],\n    };\n    this.errorOutlet.viewContainer.createEmbeddedView(\n      errorDef.template,\n      context\n    );\n    this.cdRef.markForCheck();\n  }\n\n  private _getCustomErrorMessage(errors: string[]) {\n    return this.customErrorMessages.find((customErrorMessage) =>\n      errors.some((error) => error === customErrorMessage.ngxMatErrorDefFor)\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxMatErrorDef, NgxMatErrorOutlet, NgxMatErrors } from './ngx-mat-errors.component';\n\n@NgModule({\n  declarations: [NgxMatErrors, NgxMatErrorDef, NgxMatErrorOutlet],\n  imports: [CommonModule],\n  exports: [NgxMatErrors, NgxMatErrorDef],\n})\nexport class NgxMatErrorsModule {}\n","import { formatDate } from '@angular/common';\r\nimport { FactoryProvider, LOCALE_ID } from '@angular/core';\r\nimport { ErrorMessages, LengthError, MaxError, MinError } from '../error-meassages';\r\nimport { NGX_MAT_ERROR_DEFAULT_OPTIONS } from '../ngx-mat-errors.component';\r\n\r\nexport function errorMessagesEnFactory(\r\n  locale: string,\r\n  format = 'shortDate'\r\n): ErrorMessages {\r\n  return {\r\n    min: (error: MinError) =>\r\n      `Please enter a value greater than or equal to ${error.min}.`,\r\n    max: (error: MaxError) =>\r\n      `Please enter a value less than or equal to ${error.max}.`,\r\n    required: `This field is required.`,\r\n    email: `Please enter a valid email address.`,\r\n    minlength: (error: LengthError) =>\r\n      `Please enter at least ${error.requiredLength} characters.`,\r\n    maxlength: (error: LengthError) =>\r\n      `Please enter no more than ${error.requiredLength} characters.`,\r\n    matDatepickerMin: (error: MinError) => {\r\n      const formatted = formatDate(error.min, format, locale);\r\n      return `Please enter a date greater than or equal to ${\r\n        formatted ?? error.min\r\n      }.`;\r\n    },\r\n    matDatepickerMax: (error: MaxError) => {\r\n      const formatted = formatDate(error.max, format, locale);\r\n      return `Please enter a date less than or equal to ${\r\n        formatted ?? error.max\r\n      }.`;\r\n    },\r\n  };\r\n}\r\n\r\nexport const NGX_MAT_ERROR_CONFIG_EN: FactoryProvider = {\r\n  provide: NGX_MAT_ERROR_DEFAULT_OPTIONS,\r\n  useFactory: errorMessagesEnFactory,\r\n  deps: [LOCALE_ID],\r\n};\r\n","import { formatDate } from '@angular/common';\r\nimport { FactoryProvider, LOCALE_ID } from '@angular/core';\r\nimport { ErrorMessages, LengthError, MaxError, MinError } from '../error-meassages';\r\nimport { NGX_MAT_ERROR_DEFAULT_OPTIONS } from '../ngx-mat-errors.component';\r\n\r\nexport function errorMessagesHuFactory(locale: string, format = 'shortDate'): ErrorMessages {\r\n  return {\r\n    min: (error: MinError) => `Nem lehet kisebb, mint ${error.min}.`,\r\n    max: (error: MaxError) => `Nem lehet nagyobb, mint ${error.max}.`,\r\n    required: `Kötelező mező.`,\r\n    email: `Nem érvényes e-mail cím.`,\r\n    minlength: (error: LengthError) =>\r\n      `Legalább ${error.requiredLength} karakter hosszú lehet.`,\r\n    maxlength: (error: LengthError) =>\r\n      `Legfeljebb ${error.requiredLength} karakter hosszú lehet.`,\r\n    server: (error: string) => error,\r\n    matDatepickerMin: (error: MinError) => {\r\n      const formatted = formatDate(error.min, format, locale);\r\n      return `Nem lehet korábbi dátum, mint ${formatted ?? error.min}`;\r\n    },\r\n    matDatepickerMax: (error: MaxError) => {\r\n      const formatted = formatDate(error.max, format, locale);\r\n      return `Nem lehet készőbbi dátum, mint ${formatted ?? error.max}`;\r\n    },\r\n  };\r\n}\r\n\r\nexport const NGX_MAT_ERROR_CONFIG_HU: FactoryProvider = {\r\n  provide: NGX_MAT_ERROR_DEFAULT_OPTIONS,\r\n  useFactory: errorMessagesHuFactory,\r\n  deps: [LOCALE_ID]\r\n};\r\n","/*\n * Public API Surface of ngx-mat-errors\n */\n\nexport * from './lib/ngx-mat-errors.component';\nexport * from './lib/ngx-mat-errors.module';\nexport * from './lib/error-meassages';\nexport * from './lib/locales';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","Directive","TemplateRef","Input","ViewContainerRef","ElementRef","startWith","map","distinctUntilChanged","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","Optional","Inject","MatFormField","ViewChild","ContentChildren","NgModule","CommonModule","formatDate","LOCALE_ID"],"mappings":"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"}